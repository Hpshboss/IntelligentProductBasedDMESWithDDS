// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file orderInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "orderInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

orderInfo::orderInfo()
{
    // m_orderNumber com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ddf90b0
    m_orderNumber = 0;
    // m_partNumber com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57536d79
    m_partNumber = 0;
    // m_quantity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b0143d3
    m_quantity = 0;
    // m_note com.eprosima.idl.parser.typecode.StringTypeCode@5a8e6209
    m_note ="";

}

orderInfo::~orderInfo()
{




}

orderInfo::orderInfo(const orderInfo &x)
{
    m_orderNumber = x.m_orderNumber;
    m_partNumber = x.m_partNumber;
    m_quantity = x.m_quantity;
    m_note = x.m_note;
}

orderInfo::orderInfo(orderInfo &&x)
{
    m_orderNumber = x.m_orderNumber;
    m_partNumber = x.m_partNumber;
    m_quantity = x.m_quantity;
    m_note = std::move(x.m_note);
}

orderInfo& orderInfo::operator=(const orderInfo &x)
{

    m_orderNumber = x.m_orderNumber;
    m_partNumber = x.m_partNumber;
    m_quantity = x.m_quantity;
    m_note = x.m_note;

    return *this;
}

orderInfo& orderInfo::operator=(orderInfo &&x)
{

    m_orderNumber = x.m_orderNumber;
    m_partNumber = x.m_partNumber;
    m_quantity = x.m_quantity;
    m_note = std::move(x.m_note);

    return *this;
}

size_t orderInfo::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t orderInfo::getCdrSerializedSize(const orderInfo& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.note().size() + 1;


    return current_alignment - initial_alignment;
}

void orderInfo::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_orderNumber;
    scdr << m_partNumber;
    scdr << m_quantity;
    scdr << m_note;
}

void orderInfo::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_orderNumber;
    dcdr >> m_partNumber;
    dcdr >> m_quantity;
    dcdr >> m_note;
}

/*!
 * @brief This function sets a value in member orderNumber
 * @param _orderNumber New value for member orderNumber
 */
void orderInfo::orderNumber(uint32_t _orderNumber)
{
m_orderNumber = _orderNumber;
}

/*!
 * @brief This function returns the value of member orderNumber
 * @return Value of member orderNumber
 */
uint32_t orderInfo::orderNumber() const
{
    return m_orderNumber;
}

/*!
 * @brief This function returns a reference to member orderNumber
 * @return Reference to member orderNumber
 */
uint32_t& orderInfo::orderNumber()
{
    return m_orderNumber;
}

/*!
 * @brief This function sets a value in member partNumber
 * @param _partNumber New value for member partNumber
 */
void orderInfo::partNumber(uint32_t _partNumber)
{
m_partNumber = _partNumber;
}

/*!
 * @brief This function returns the value of member partNumber
 * @return Value of member partNumber
 */
uint32_t orderInfo::partNumber() const
{
    return m_partNumber;
}

/*!
 * @brief This function returns a reference to member partNumber
 * @return Reference to member partNumber
 */
uint32_t& orderInfo::partNumber()
{
    return m_partNumber;
}

/*!
 * @brief This function sets a value in member quantity
 * @param _quantity New value for member quantity
 */
void orderInfo::quantity(uint16_t _quantity)
{
m_quantity = _quantity;
}

/*!
 * @brief This function returns the value of member quantity
 * @return Value of member quantity
 */
uint16_t orderInfo::quantity() const
{
    return m_quantity;
}

/*!
 * @brief This function returns a reference to member quantity
 * @return Reference to member quantity
 */
uint16_t& orderInfo::quantity()
{
    return m_quantity;
}

/*!
 * @brief This function copies the value in member note
 * @param _note New value to be copied in member note
 */
void orderInfo::note(const std::string &_note)
{
m_note = _note;
}

/*!
 * @brief This function moves the value in member note
 * @param _note New value to be moved in member note
 */
void orderInfo::note(std::string &&_note)
{
m_note = std::move(_note);
}

/*!
 * @brief This function returns a constant reference to member note
 * @return Constant reference to member note
 */
const std::string& orderInfo::note() const
{
    return m_note;
}

/*!
 * @brief This function returns a reference to member note
 * @return Reference to member note
 */
std::string& orderInfo::note()
{
    return m_note;
}

size_t orderInfo::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool orderInfo::isKeyDefined()
{
   return false;
}

void orderInfo::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
}
